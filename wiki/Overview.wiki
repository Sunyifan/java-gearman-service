#summary A basic overview of the java gearman service API
#labels Featured
<wiki:toc max_depth="2" />

= Introduction =
----

The Java Gearman Service provides a complete gearman implementation in java. This includes the client, worker, and job server. 

<br>
<br>
= Standalone Server =
----

The java-gearman-service jar file doubles as a fully featured gearman server.

== Usage ==
{{{
java [jvm options] -jar java-gearman-service-X.Y.Z.jar [server options]
}}}

=== Server Options ===

The server options will specify the server's system variables and/or tell the server what actions to take. The following is a list of the available options.

<table>
<tr>
 <td width=100>*Short Name*</td>
 <td width=200>*Long Name*</td>
 <td>*Description*</td>
</tr>
<tr>
 <td>-p <i>PORT</i></td>
 <td>--port=<i>PORT</i></td>
 <td>Defines what port number the server will listen on (Default: 4730)</td>
</tr>
<tr>
 <td>-v</td>
 <td>--version</td>
 <td>Display the version of java gearman service and exit</td>
</tr>
<tr>
 <td>-?</td>
 <td>--help</td>
 <td>Print the help menu and exit</td>
</tr>
</table>

=== JVM Options ===
The following is a list of some applicable jvm options.

<table>
<tr>
 <td width=150>*Option Name*</td>
 <td>*Description*</td>
</tr>
<tr>
 <td>-server</td>
 <td>Use Server !HotSpot VM. Must be first option (!HotSpot Only)</td>
</tr>
</table>

<br>
<br>
= Application Programming Interface =
----

== Gearman ==

A [http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/Gearman.html Gearman] object defines a gearman systems and creates gearman services. These services include [http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanWorker.html GearmanWorker]s, [http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanClient.html GearmanClient]s, and [http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanServer.html GearmanServer]s. All services created by the same Gearman object are said to be in the same system, and all services in the same system share system wide thread resources. 

Creating Gearman Services:
{{{
// Create a new instance of the gearman service provider
Gearman gearman = new Gearman();

// Create a new client
GearmanClient client = gearman.createGearmanClient();

// Create a new worker
GearmanWorker worker = gearman.createGearmanWorker();

//Create a new server
GearmanServer server = gearman.createGearmanServer();
}}}

== !GearmanClient ==
[http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanClient.html GearmanClient] is the client class for the Gearman distributed job system, providing a framework for sending jobs to one or more Gearman servers. These jobs are then distributed out to a farm of workers.

<br>
The client will need to communicate with a job server. To tell the client what job servers it may communicate with, use the [http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanJobServerPool.html#addServer%28org.gearman.GearmanServer%29 addServer] method.
{{{
// Add a local server to the set of server's this client can communicate with
client.addServer(server);

// Add a remote server to the set of server's this client can communicate with
client.addServer(new InetSocketAddress(address, port));
}}}

<br>
To submit a job, you'll need to create a new [http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanJob.html GearmanJob]. The GearmanJob class is an abstract class with the constructor taking a string representing the gearman function name and a byte[] that will be sent to the worker
{{{
// Create a GearmanJob.
GearmanJob job = new GearmanJob(funcName, payload) {
   @Override
   public void callbackStatus(long numerator, long denominator) {
      /*
       * This method is used to send status updates from the worker to the
       * client while the job is executing
       */
   }
			
   @Override
   public void callbackData(byte[] data) {
      /*
       * This method is used to send intermediate data from the worker to the
       * client while the job is executing.  
       */
   }
			
   @Override
   public void callbackWarning(byte[] warning) {
      /*
       *  This method is used to send warning information from the worker to the
       *  client while the job is executing.
       */
   }

   @Override
   protected void onComplete(GearmanJobResult result) {
      /*
       * This method is called after the worker has completed the job
       */
   }
};
}}}

{{{
// Create submition handler
GearmanSubmitHandler callback = new GearmanSubmitHandler() {
   @Override
   public void onComplete(GearmanJob job, SubmitCallbackResult result) {
      /*
       * Called after the submission operation has completed
       */
   }
};
}}}

{{{
// submit job 
client.submit(job, callback);
}}}
== !GearmanWorker ==
[http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanWorker.html GearmanWorker] is the worker class for the Gearman distributed job system, providing a framework for receiving and serving jobs from a Gearman server.

== !GearmanServer ==
[http://java-gearman-service.googlecode.com/svn/javadoc/org/gearman/GearmanServer.html GearmanServer] is the server class for receiving and distributing jobs over the network or in the local address space.